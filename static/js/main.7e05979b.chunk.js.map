{"version":3,"sources":["js/LocalStorageManager.ts","components/ServiceRegions.tsx","components/LanguageOptions.tsx","components/OutputOptions.tsx","js/FormatOutput.ts","js/FilePicker.ts","js/AudioSplitter.ts","pages/Home.tsx","images/icon.svg","components/Header.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["getSubsriptionKey","localStorage","getItem","key","getRegion","getOutputFormat","ServiceRegions","props","setServiceRegion","id","defaultValue","onChange","event","target","value","LanguageOptions","setLanguageOptions","OutputOptions","setOutputFormat","output","data","output_name","media_format","format","total_length","blob","outputFile","csv","txt","eaf","TextGrid","undefined","a","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","Blob","text","map","element","split","media_name","intervals","addIntervalBreaks","header","Date","toISOString","length","time_orders","tier","push","i","splits","content","start","Math","floor","parseFloat","end","firstIndex","secondIndex","concat","textgrid","interval_buffer","fill_empty_intervals","forEach","thisTime","lastTime","diff","thisSplits","lastSplits","splice","firstTime","filePickerChange","files","setContinousRecognitionDisabled","subscriptionKeyValue","serviceRegion","languageOptions","console","log","audioConfig","fileRecos","speechConfig","SpeechSDK","fromSubscription","speechRecognitionLanguage","Array","from","file","fromWavFileInput","file_reco","fileName","name","reco","recognize","namedRecos","out","setTranscribing","setTranscriptionFinished","setData","allPhrases","current_progress","finishedRecos","progressDict","recognized","s","e","result","reason","NoMatch","noMatchDetail","fromResult","timeStart","parseInt","replace","isNaN","finalText","onset","offset","duration","phrase","current_length","Object","entries","round","button","getElementById","innerText","canceled","Error","errorDetails","includes","alert","sessionStarted","sessionStopped","sort","b","a_stamp","b_stamp","select","finished","outputFormat","style","visibility","removeAttribute","speechStartDetected","speechEndDetected","startContinuousRecognitionAsync","splitAudio","arrayBuffer","audioContext","AudioContext","sampleRate","decodeAudioData","buffer","split_length","time","File","bufferToWave","min","toString","abuffer","len","sample","ArrayBuffer","view","DataView","channels","pos","setUint32","setUint16","numberOfChannels","getChannelData","max","setInt16","type","Home","useState","setSubscriptionKeyValue","outputFileName","setOutputFileName","mediaFormat","setMediaFormat","setShowApiModal","transcribing","transcriptionFinished","setFile","setTime","apiModalRef","useRef","setRecos","useEffect","setItem","startTranscription","setAttribute","audio_time","recosLocal","handleClickOutside","current","contains","addEventListener","removeEventListener","className","size","onFocus","onBlur","accept","onClick","resetTranscription","substring","lastIndexOf","disabled","Header","src","logo","alt","Footer","rel","App","basename","process","path","exact","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7e05979b.chunk.js","sourcesContent":["export const getSubsriptionKey = (): string => {\r\n  if (localStorage.getItem('subscriptionKey') !== null) {\r\n    const key = localStorage.getItem('subscriptionKey')\r\n    return key ? key : ''\r\n  }\r\n  return 'Your Microsoft Speech API Key'\r\n}\r\n\r\nexport const getRegion = (): string => {\r\n  if (localStorage.getItem('region') !== null) {\r\n    const key = localStorage.getItem('region')\r\n    return key ? key : ''\r\n  }\r\n  return 'eastus'\r\n}\r\n\r\nexport const getOutputFormat = (): string => {\r\n  if (localStorage.getItem('outputFormat') !== null) {\r\n    const key = localStorage.getItem('outputFormat')\r\n    return key ? key : ''\r\n  }\r\n  return '.csv'\r\n}","import { getRegion } from '../js/LocalStorageManager';\r\nexport const ServiceRegions = (props: any) => {\r\n  const { setServiceRegion } = props\r\n  return (\r\n    <select id=\"serviceRegion\" defaultValue = {getRegion()} onChange={(event) => setServiceRegion(event.target.value)}>\r\n      <option value=\"australiaeast\">australiaEast</option>\r\n      <option value=\"canadacentral\">canadaCentral</option>\r\n      <option value=\"centralus\">centralUS</option>\r\n      <option value=\"eastus\">eastUS</option>\r\n      <option value=\"eastus2\">eastUS2</option>\r\n      <option value=\"francecentral\">franceCentral</option>\r\n      <option value=\"indiacentral\">indiaCentral</option>\r\n      <option value=\"japaneast\">japanEast</option>\r\n      <option value=\"koreacentral\">koreaCentral</option>\r\n      <option value=\"northcentralus\">northCentralUS</option>\r\n      <option value=\"northeurope\">northEurope</option>\r\n      <option value=\"southcentralus\">southCentralUS</option>\r\n      <option value=\"southeastasia\">southeastAsia</option>\r\n      <option value=\"uksouth\">ukSouth</option>\r\n      <option value=\"westeurope\">westEurope</option>\r\n      <option value=\"westus\">westUS</option>\r\n      <option value=\"westus2\">westUS2</option>\r\n    </select>\r\n  )\r\n}\r\n","export const LanguageOptions = (props: any) => {\r\n  const { setLanguageOptions } = props\r\n\r\n  return (\r\n    <select id=\"languageOptions\" defaultValue=\"en-US\" onChange={(event) => setLanguageOptions(event.target.value)}>\r\n      <option value=\"ar-DZ\">Arabic - Algeria</option>\r\n      <option value=\"ar-BH\">Arabic - Bahrain, modern standard</option>\r\n      <option value=\"ar-EG\">Arabic - Egypt</option>\r\n      <option value=\"ar-IQ\">Arabic - Iraq</option>\r\n      <option value=\"ar-IL\">Arabic - Israel</option>\r\n      <option value=\"ar-JO\">Arabic - Jordan</option>\r\n      <option value=\"ar-KW\">Arabic - Kuwait</option>\r\n      <option value=\"ar-LB\">Arabic - Lebanon</option>\r\n      <option value=\"ar-LY\">Arabic - Libya</option>\r\n      <option value=\"ar-MA\">Arabic - Morocco</option>\r\n      <option value=\"ar-OM\">Arabic - Oman</option>\r\n      <option value=\"ar-PS\">Arabic - Palestinian Authority</option>\r\n      <option value=\"ar-QA\">Arabic - Qatar</option>\r\n      <option value=\"ar-SA\">Arabic - Saudi Arabia</option>\r\n      <option value=\"ar-SY\">Arabic - Syria</option>\r\n      <option value=\"ar-TU\">Arabic - Tunisia</option>\r\n      <option value=\"ar-AE\">Arabic - United Arab Emirates</option>\r\n      <option value=\"ar-YE\">Arabic - Yemen</option>\r\n      <option value=\"bg-BG\">Bulgarian - Bulgaria</option>\r\n      <option value=\"ca-ES\">Catalan - Spain</option>\r\n      <option value=\"zh-HK\">Chinese - Cantonese, traditional</option>\r\n      <option value=\"zh-CN\">Chinese - Mandarin, simplified</option>\r\n      <option value=\"zh-TW\">Chinese - Taiwanese Mandarin</option>\r\n      <option value=\"hr-HR\">Croatian - Croatia</option>\r\n      <option value=\"cz-CZ\">Czech - Czech Republic</option>\r\n      <option value=\"da-DK\">Danish - Denmark</option>\r\n      <option value=\"nl-NL\">Dutch - Netherlands</option>\r\n      <option value=\"en-AU\">English - Australia</option>\r\n      <option value=\"en-CA\">English - Canada</option>\r\n      <option value=\"en-GH\">English - Ghana</option>\r\n      <option value=\"en-HK\">English - Hong Kong</option>\r\n      <option value=\"en-IN\">English - India</option>\r\n      <option value=\"en-IE\">English - Ireland</option>\r\n      <option value=\"en-KE\">English - Kenya</option>\r\n      <option value=\"en-NZ\">English - New Zealand</option>\r\n      <option value=\"en-NG\">English - Nigeria</option>\r\n      <option value=\"en-PH\">English - Philippines</option>\r\n      <option value=\"en-SG\">English - Singapore</option>\r\n      <option value=\"en-ZA\">English - South Africa</option>\r\n      <option value=\"en-TZ\">English - Tanzania</option>\r\n      <option value=\"en-GB\">English - United Kingdom</option>\r\n      <option value=\"en-US\">English - United States</option>\r\n      <option value=\"et-EE\">Estonian - Estonia</option>\r\n      <option value=\"fil-PH\">Filipino - Philippines</option>\r\n      <option value=\"fi-FI\">Finnish - Finland</option>\r\n      <option value=\"fr-CA\">French - Canada</option>\r\n      <option value=\"fr-FR\">French - France</option>\r\n      <option value=\"fr-CH\">French - Switzerland</option>\r\n      <option value=\"de-AT\">German - Austria</option>\r\n      <option value=\"de-DE\">German - Germany</option>\r\n      <option value=\"el-GR\">Greek - Greece</option>\r\n      <option value=\"gu-IN\">Gujarati - India</option>\r\n      <option value=\"he-IL\">Hebrew - Israel</option>\r\n      <option value=\"hi-IN\">Hindi - India</option>\r\n      <option value=\"hu-HU\">Hungarian - Hungary</option>\r\n      <option value=\"id-ID\">Indonesian - Indonesia</option>\r\n      <option value=\"ga-IE\">Irish - Ireland</option>\r\n      <option value=\"it-IT\">Italian - Italy</option>\r\n      <option value=\"ja-JP\">Japanese - Japan</option>\r\n      <option value=\"ko-KR\">Korean - Korea</option>\r\n      <option value=\"lv-LV\">Latvian - Latvia</option>\r\n      <option value=\"lt-LT\">Lithuanian - Lithuania</option>\r\n      <option value=\"ms-MY\">Malay - Malaysia</option>\r\n      <option value=\"mt-MT\">Maltese - Malta</option>\r\n      <option value=\"mr-IN\">Marathi - India</option>\r\n      <option value=\"nb-NO\">Norwegian - Norway (Bokmål)</option>\r\n      <option value=\"pl-PL\">Polish - Poland</option>\r\n      <option value=\"pt-BR\">Portuguese - Brazil</option>\r\n      <option value=\"pt-PT\">Portuguese - Portugal</option>\r\n      <option value=\"ro-RO\">Romanian - Romania</option>\r\n      <option value=\"ru-RU\">Russian - Russia</option>\r\n      <option value=\"sk-SK\">Slovak - Slovakia</option>\r\n      <option value=\"sl-SL\">Slovenian - Slovenia</option>\r\n      <option value=\"es-AR\">Spanish - Argentina</option>\r\n      <option value=\"es-BO\">Spanish - Bolivia</option>\r\n      <option value=\"es-CL\">Spanish - Chile</option>\r\n      <option value=\"es-CO\">Spanish - Colombia</option>\r\n      <option value=\"es-CR\">Spanish - Costa Rica</option>\r\n      <option value=\"es-CU\">Spanish - Cuba</option>\r\n      <option value=\"es-DO\">Spanish - Dominican Republic</option>\r\n      <option value=\"es-EC\">Spanish - Ecuador</option>\r\n      <option value=\"es-SV\">Spanish - El Salvador</option>\r\n      <option value=\"es-GQ\">Spanish - Equatorial Guinea</option>\r\n      <option value=\"es-GT\">Spanish - Guatemala</option>\r\n      <option value=\"es-HN\">Spanish - Honduras</option>\r\n      <option value=\"es-MX\">Spanish - Mexico</option>\r\n      <option value=\"es-NI\">Spanish - Nicaragua</option>\r\n      <option value=\"es-PA\">Spanish - Panama</option>\r\n      <option value=\"es-PY\">Spanish - Paraguay</option>\r\n      <option value=\"es-PE\">Spanish - Peru</option>\r\n      <option value=\"es-PR\">Spanish - Puerto Rico</option>\r\n      <option value=\"es-ES\">Spanish - Spain</option>\r\n      <option value=\"es-UY\">Spanish - Uruguay</option>\r\n      <option value=\"es-US\">Spanish - United States</option>\r\n      <option value=\"es-VE\">Spanish - Venezuela</option>\r\n      <option value=\"sv-SE\">Swedish - Sweden</option>\r\n      <option value=\"ta-IN\">Tamil - India</option>\r\n      <option value=\"te-IN\">Telugu - India</option>\r\n      <option value=\"th-TH\">Thai - Thailand</option>\r\n      <option value=\"tr-TR\">Turkish - Turkey</option>\r\n      <option value=\"vi-VN\">Vietnamese - Vietnam</option>\r\n    </select>\r\n  )\r\n}\r\n","import { getOutputFormat } from \"../js/LocalStorageManager\"\r\nexport const OutputOptions = (props: any) => {\r\n  const { setOutputFormat } = props\r\n\r\n  return (\r\n    <select id=\"outputFormat\" defaultValue = {getOutputFormat()} onChange={(event) => setOutputFormat(event.target.value)}>\r\n      <option value=\".csv\">csv</option>\r\n      <option value=\".txt\">txt (no timestamps)</option>\r\n      <option value=\".TextGrid\">TextGrid</option>\r\n      <option value=\".eaf\">eaf</option>\r\n    </select>\r\n  )\r\n}\r\n","export const output = (data: string[], output_name: string, media_format: string, format: string, total_length: number) => {\r\n    let outputFile = output_name + format;\r\n    var blob;\r\n    if (format === '.csv') {\r\n        blob = csv(data);;\r\n    } else if (format === '.txt') {\r\n        blob = txt(data);\r\n    } else if (format === '.eaf') {\r\n        blob = eaf(data, output_name + media_format);\r\n    } else if (format === '.TextGrid') {\r\n        blob = TextGrid(data, total_length);\r\n    }\r\n\r\n    if (blob !== null && blob !== undefined) {\r\n        const a = document.createElement(\"a\");\r\n        a.href = URL.createObjectURL(blob);\r\n        a.download = outputFile;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n    }\r\n}\r\n\r\nconst csv = (data: string[]): Blob => {\r\n    const blob = new Blob(data as BlobPart[]);\r\n    return blob;\r\n}\r\n\r\nconst txt = (data: string[]): Blob => {\r\n    var text: string[] = data.map((element) => { return element.split(',')[0] + '\\n' });\r\n    const blob = new Blob(text as BlobPart[]);\r\n    return blob;\r\n}\r\n\r\nconst eaf = (data: string[], media_name: string): Blob => {\r\n    const interval_buffer = 0.3;\r\n    let intervals = addIntervalBreaks(data, interval_buffer, -1, false);\r\n    let date = new Date().toISOString();\r\n    let header: string[] = ['<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n',\r\n    '<ANNOTATION_DOCUMENT AUTHOR=\"\" DATE=\"' + date + '\"\\n',\r\n    '    FORMAT=\"3.0\" VERSION=\"3.0\"\\n',\r\n    '    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.mpi.nl/tools/elan/EAFv3.0.xsd\">\\n',\r\n    '    <HEADER MEDIA_FILE=\"\" TIME_UNITS=\"milliseconds\">\\n',\r\n    '        <MEDIA_DESCRIPTOR MEDIA_URL=\"' + media_name + '\" />\\n',\r\n    '        <PROPERTY NAME=\"URN\">urn:nl-mpi-tools-elan-eaf:f1c984f0-9484-44ee-9e94-4d61c5d25a11</PROPERTY>\\n',\r\n    '        <PROPERTY NAME=\"lastUsedAnnotationId\">' + intervals.length + '</PROPERTY>\\n',\r\n    '    </HEADER>\\n'\r\n    ];\r\n    let time_orders: string[] = [];\r\n    let tier: string[] = [];\r\n\r\n    time_orders.push('    <TIME_ORDER>\\n');\r\n    tier.push('    <TIER LINGUISTIC_TYPE_REF=\"default-lt\" TIER_ID=\"default\">\\n');\r\n    for (let i = 0; i < intervals.length; i++) {\r\n        let splits = intervals[i].split(',');\r\n        let content = splits[0];\r\n        let start = Math.floor(parseFloat(splits[1]) * 1000);\r\n        let end = Math.floor(parseFloat(splits[2]) * 1000);\r\n        let firstIndex = 2 * i + 1;\r\n        let secondIndex = 2 * i + 2;\r\n        time_orders.push('        <TIME_SLOT TIME_SLOT_ID=\"ts' + firstIndex + '\" TIME_VALUE=\"' + start + '\"/>\\n');\r\n        time_orders.push('        <TIME_SLOT TIME_SLOT_ID=\"ts' + secondIndex + '\" TIME_VALUE=\"' + end + '\"/>\\n');\r\n        tier.push('        <ANNOTATION>\\n');\r\n        tier.push('            <ALIGNABLE_ANNOTATION ANNOTATION_ID=\"a' + (i+1) + '\"\\n');\r\n        tier.push('                TIME_SLOT_REF1=\"ts' + firstIndex + '\" TIME_SLOT_REF2=\"ts' + secondIndex + '\">\\n');\r\n        tier.push('                <ANNOTATION_VALUE>' + content + '</ANNOTATION_VALUE>\\n');\r\n        tier.push('        </ALIGNABLE_ANNOTATION>\\n')\r\n        tier.push('        </ANNOTATION>\\n');\r\n    }\r\n    time_orders.push('    </TIME_ORDER>\\n');\r\n    tier.push('    </TIER>\\n');\r\n    let footer: string[] = ['    <LINGUISTIC_TYPE GRAPHIC_REFERENCES=\"false\"\\n',\r\n    '        LINGUISTIC_TYPE_ID=\"default-lt\" TIME_ALIGNABLE=\"true\"/>\\n',\r\n    '    <CONSTRAINT\\n',\r\n    '        DESCRIPTION=\"Time subdivision of parent annotation\\'s time interval, no time gaps allowed within this interval\" STEREOTYPE=\"Time_Subdivision\"/>\\n',\r\n    '    <CONSTRAINT\\n',\r\n    '        DESCRIPTION=\"Symbolic subdivision of a parent annotation. Annotations refering to the same parent are ordered\" STEREOTYPE=\"Symbolic_Subdivision\"/>\\n',\r\n    '    <CONSTRAINT DESCRIPTION=\"1-1 association with a parent annotation\" STEREOTYPE=\"Symbolic_Association\"/>\\n',\r\n    '    <CONSTRAINT\\n',\r\n    '        DESCRIPTION=\"Time alignable annotations within the parent annotation\\'s time interval, gaps are allowed\" STEREOTYPE=\"Included_In\"/>\\n',\r\n    '</ANNOTATION_DOCUMENT>'];\r\n\r\n    let text = header.concat(time_orders).concat(tier).concat(footer);\r\n    return new Blob(text as BlobPart[]);\r\n}\r\n\r\nconst TextGrid = (data: string[], total_length: number): Blob => {\r\n    const interval_buffer = 0.3;\r\n    let intervals = addIntervalBreaks(data, interval_buffer, total_length, true);\r\n    // header info\r\n    var textgrid: string[] = ['File type = \"ooTextFile\"\\n',\r\n        'Object class = \"TextGrid\"\\n',\r\n        '\\n',\r\n        'xmin = 0\\n',\r\n        'xmax = ' + total_length + '\\n',\r\n        'tiers? <exists>\\n',\r\n        'size = 1\\n',\r\n        'item []:\\n',\r\n        '    item [1]:\\n',\r\n        '        class = \"IntervalTier\"\\n',\r\n        '        name = \"sentence\"\\n',\r\n        '        xmin = 0\\n',\r\n        '        xmax = ' + total_length + '\\n',\r\n        '        intervals: size = ' + intervals.length + '\\n'];\r\n    for (let i = 0; i < intervals.length; i++) {\r\n        var splits = intervals[i].split(',');\r\n        textgrid.push('        intervals[' + (i + 1) + ']:\\n');\r\n        textgrid.push('            xmin = ' + splits[1] + '\\n');\r\n        textgrid.push('            xmax = ' + splits[2]); // already has the newline character\r\n        textgrid.push('            text = \"' + splits[0] + '\"\\n');\r\n    }\r\n    const blob = new Blob(textgrid as BlobPart[]);\r\n    return blob;\r\n}\r\n\r\nconst addIntervalBreaks = (data: string[], interval_buffer: number, total_length: number, fill_empty_intervals: boolean): string[] => {\r\n    // first remove all empty intervals\r\n    var intervals: string[] = [];\r\n    data.forEach((element) => {\r\n        if (element.split(',')[0] !== '' && element.split(',')[0] !== 'Text') {\r\n            intervals.push(element);\r\n        }\r\n    });\r\n    // try to shift each interval back by interval_buffer\r\n    for (let i = 0; i < intervals.length; i++) {\r\n        let thisTime = parseFloat(intervals[i].split(',')[1]);\r\n        let lastTime = i === 0 ? 0 : parseFloat(intervals[i - 1].split(',')[2]);\r\n        let diff = thisTime - lastTime;\r\n        if (diff > interval_buffer * 2) {\r\n            thisTime -= interval_buffer;\r\n        } else if (diff > interval_buffer) {\r\n            thisTime -= interval_buffer;\r\n            lastTime += diff - interval_buffer;\r\n        } else {\r\n            thisTime -= diff;\r\n        }\r\n        var thisSplits = intervals[i].split(',');\r\n        intervals[i] = thisSplits[0] + ',' + thisTime + ',' + thisSplits[2];\r\n        if (i !== 0) {\r\n            var lastSplits = intervals[i - 1].split(',');\r\n            intervals[i - 1] = lastSplits[0] + ',' + lastSplits[1] + ',' + lastTime + '\\n';\r\n        }\r\n    }\r\n    if (fill_empty_intervals) {\r\n        // add empty intervals back in\r\n        for (let i = intervals.length - 1; i > 0; i--) {\r\n            let thisTime = parseFloat(intervals[i].split(',')[1]);\r\n            let lastTime = parseFloat(intervals[i - 1].split(',')[2]);\r\n            if (thisTime !== lastTime) {\r\n                // add at index\r\n                intervals.splice(i, 0, ',' + lastTime + ',' + thisTime + '\\n');\r\n            }\r\n        }\r\n        // add first and last intervals\r\n        var firstTime = parseFloat(intervals[0].split(',')[1]);\r\n        if (firstTime !== 0) {\r\n            intervals.splice(0, 0, ',0,' + firstTime + '\\n')\r\n        }\r\n        var lastTime = parseFloat(intervals[intervals.length - 1].split(',')[2]);\r\n        if (lastTime !== total_length) {\r\n            intervals.splice(intervals.length, 0, ',' + lastTime + ',' + total_length + '\\n')\r\n        }\r\n\r\n    }\r\n    return intervals;\r\n}","import *  as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk'\r\nimport { output } from '../js/FormatOutput'\r\n\r\nexport interface FileWithReco {\r\n  fileName: string\r\n  reco: SpeechSDK.SpeechRecognizer\r\n}\r\n\r\nexport const filePickerChange = (\r\n  files: File[] | null,\r\n  setContinousRecognitionDisabled: any,\r\n  subscriptionKeyValue: string,\r\n  serviceRegion: string,\r\n  languageOptions: string,\r\n) => {\r\n\r\n  console.log(files);\r\n\r\n  let fileRecos: FileWithReco[] = []\r\n\r\n  setContinousRecognitionDisabled(true)\r\n  let audioConfig;\r\n\r\n  const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(subscriptionKeyValue, serviceRegion);\r\n  speechConfig.speechRecognitionLanguage = languageOptions;\r\n\r\n\r\n  Array.from(files ? files : []).forEach((file: File) => {\r\n    audioConfig = SpeechSDK.AudioConfig.fromWavFileInput(file);\r\n    const file_reco = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);\r\n    fileRecos.push({ fileName: file.name, reco: file_reco })\r\n  })\r\n\r\n  return fileRecos;\r\n}\r\n\r\nexport const recognize = (namedRecos: FileWithReco[], out: string, media_format: string,\r\n  setTranscribing: any, setTranscriptionFinished: any, setData: any, total_length: number) => {\r\n  let allPhrases: string[] = ['Text,Onset,Offset\\n'];\r\n  let current_progress = -1;\r\n  let finishedRecos = 0;\r\n  let progressDict: {[key: string]: any} = {};\r\n\r\n  namedRecos.forEach(async ({ fileName, reco }) => {\r\n    progressDict[fileName] = 0;\r\n    // The event recognized signals that a final recognition result is received.\r\n    // This is the final event that a phrase has been recognized.\r\n    // For continuous recognition, you will get one recognized event for each phrase recognized.\r\n    reco.recognized = (s: SpeechSDK.Recognizer, e: SpeechSDK.SpeechRecognitionEventArgs) => {\r\n      // Indicates that recognizable speech was not detected, and that recognition is done.\r\n      if (e.result.reason === SpeechSDK.ResultReason.NoMatch) {\r\n        const noMatchDetail = SpeechSDK.NoMatchDetails.fromResult(e.result);\r\n        console.log(`noMatchDetail is ${noMatchDetail}`)\r\n      }\r\n      //Manipulation of output\r\n      console.log(e.result);\r\n      let timeStart = parseInt(fileName.replace('.wav', ''));\r\n      if (isNaN(timeStart)) {\r\n        timeStart = 0;\r\n      }\r\n      const text = e.result.text;\r\n      const noPunctuation = text.replace(/[.,/#!$?%^&*;:{}=\\-_`~()\"]/g, \"\");\r\n      const finalText = noPunctuation.replace(/\\s{2,}/g, \" \");\r\n      const onset = (e.result.offset / 10000000) + timeStart;\r\n      const offset = (e.result.duration / 10000000) + onset;\r\n      progressDict[fileName] = offset - timeStart;\r\n      let phrase = finalText + ',' + onset + ',' + offset + '\\n';\r\n      allPhrases.push(phrase);\r\n      var current_length = 0.0;\r\n      for (const [key, value] of Object.entries(progressDict)) {\r\n          current_length += value;\r\n      }\r\n      if (Math.round(current_length / total_length * 100) > current_progress) {\r\n        current_progress = Math.round(current_length / total_length * 100);\r\n        let button = document.getElementById('transcriptionButton');\r\n        if (button !== null) {\r\n          button.innerText = \"Transcribing... (\" + current_progress + \"%)\";\r\n        }\r\n      }\r\n    }\r\n\r\n    // The event signals that the service has stopped processing speech.\r\n    // https://docs.microsoft.com/javascript/api/microsoft-cognitiveservices-speech-sdk/speechrecognitioncanceledeventargs?view=azure-node-latest\r\n    // This can happen for two broad classes of reasons.\r\n    // 1. An error is encountered.\r\n    //    In this case the .errorDetails property will contain a textual representation of the error.\r\n    // 2. Speech was detected to have ended.\r\n    //    This can be caused by the end of the specified file being reached, or ~20 seconds of silence from a microphone input.\r\n    reco.canceled = function (s, e) {\r\n      console.log(e);\r\n      if (e.reason === SpeechSDK.CancellationReason.Error) {\r\n        if (e.errorDetails.includes('StatusCode: 1006')) {\r\n          alert('HTTP Authentication failed; no valid credentials available.\\n\\nThis usually indicates that either your API key is invalid or it is for a different region than you have selected.');\r\n        }\r\n      }\r\n    };\r\n\r\n    // Signals that a new session has started with the speech service\r\n    reco.sessionStarted = function (s, e) {\r\n      console.log(e);\r\n    };\r\n\r\n    // Signals the end of a session with the speech service.\r\n    reco.sessionStopped = function (s, e) {\r\n      finishedRecos++;\r\n      if (finishedRecos === namedRecos.length) {\r\n        allPhrases.sort( (a: string, b: string) => \r\n        {\r\n          var a_stamp = a.split(',')[1];\r\n          var b_stamp = b.split(',')[1];\r\n          var a_val = a_stamp === 'Onset' ? -1 : parseFloat(a_stamp);\r\n          var b_val = b_stamp === 'Onset' ? -1 : parseFloat(b_stamp);\r\n          return a_val - b_val;\r\n        });\r\n        setTranscribing(false);\r\n        setTranscriptionFinished(true);\r\n        setData(allPhrases);\r\n        var button = document.getElementById('transcriptionButton');\r\n        var select = document.getElementById('filePicker');\r\n        var finished = document.getElementById('finishedTranscriptionText');\r\n        var outputFormat = document.getElementById('outputFormat')  as HTMLInputElement;\r\n        if (button !== null && select !== null && finished !== null && outputFormat !== null) {\r\n          button.innerText = \"Download again\";\r\n          finished.style.visibility = \"visible\";\r\n          select.removeAttribute('disabled');\r\n          output(allPhrases, out, media_format, outputFormat.value, total_length);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Signals that the speech service has started to detect speech.\r\n    reco.speechStartDetected = function (s, e) {\r\n      console.log(e);\r\n    };\r\n\r\n    // Signals that the speech service has detected that speech has stopped.\r\n    reco.speechEndDetected = function (s, e) {\r\n      console.log(e);\r\n    };\r\n\r\n    reco.startContinuousRecognitionAsync();\r\n  });\r\n}","export const splitAudio = async (file: File) => {\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const audioContext = new AudioContext({sampleRate: 16000});\r\n    const buffer = await audioContext.decodeAudioData(arrayBuffer);\r\n    const split_mins = 5;\r\n    var split_length = 16000 * split_mins * 60; //  sample rate of 16000\r\n    var time = buffer.length / 16000.0;\r\n    var files: File[] = [];\r\n    for (let i = 0; i * split_length < buffer.length; i++) {\r\n        files.push(new File([bufferToWave(buffer, i * split_length,\r\n          Math.min(buffer.length - i * split_length, split_length))], (i * 60 * split_mins).toString() + \".wav\"))\r\n    }\r\n    return [files, time];\r\n}\r\n\r\n// Convert an AudioBuffer to a Blob using WAVE representation\r\nexport const bufferToWave = (abuffer: AudioBuffer, offset: number, len: number) => {\r\n    var length = len * 2 + 44,\r\n        buffer = new ArrayBuffer(length),\r\n        view = new DataView(buffer),\r\n        channels = [],\r\n        sample, pos = 0;\r\n  \r\n    // write WAVE header\r\n    setUint32(0x46464952);                         // \"RIFF\"\r\n    setUint32(length - 8);                         // file length - 8\r\n    setUint32(0x45564157);                         // \"WAVE\"\r\n  \r\n    setUint32(0x20746d66);                         // \"fmt \" chunk\r\n    setUint32(16);                                 // length = 16\r\n    setUint16(1);                                  // PCM (uncompressed)\r\n    setUint16(1);\r\n    setUint32(abuffer.sampleRate);\r\n    setUint32(abuffer.sampleRate * 2);             // avg. bytes/sec\r\n    setUint16(2);                                  // block-align\r\n    setUint16(16);                                 // 16-bit (hardcoded in this demo)\r\n  \r\n    setUint32(0x61746164);                         // \"data\" - chunk\r\n    setUint32(length - pos - 4);                   // chunk length\r\n  \r\n    // write interleaved data\r\n    for(let i = 0; i < abuffer.numberOfChannels; i++) {\r\n      channels.push(abuffer.getChannelData(i));\r\n    }\r\n  \r\n    while(pos < length) {\r\n      sample = Math.max(-1, Math.min(1, channels[0][offset])); // clamp\r\n      sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767)|0; // scale to 16-bit signed int\r\n      view.setInt16(pos, sample, true);          // write 16-bit sample\r\n      pos += 2;\r\n      offset++;                                     // next source sample\r\n    }\r\n  \r\n    // create Blob\r\n    return new Blob([buffer], {type: \"audio/wav\"});\r\n  \r\n    function setUint16(data: any) {\r\n      view.setUint16(pos, data, true);\r\n      pos += 2;\r\n    }\r\n  \r\n    function setUint32(data: any) {\r\n      view.setUint32(pos, data, true);\r\n      pos += 4;\r\n    }\r\n  }","import { useEffect, useRef, useState } from 'react';\r\nimport { ServiceRegions } from '../components/ServiceRegions';\r\nimport { LanguageOptions } from '../components/LanguageOptions';\r\nimport { OutputOptions } from '../components/OutputOptions';\r\nimport {output} from '../js/FormatOutput';\r\nimport { APIInformationModal } from '../components/APIInformationModal';\r\nimport { getSubsriptionKey, getRegion, getOutputFormat } from '../js/LocalStorageManager';\r\nimport { filePickerChange, FileWithReco, recognize } from '../js/FilePicker';\r\nimport { splitAudio } from '../js/AudioSplitter';\r\n\r\nfunction Home() {\r\n\r\n  const [subscriptionKeyValue, setSubscriptionKeyValue] = useState(getSubsriptionKey())\r\n  const [outputFileName, setOutputFileName] = useState('example')\r\n  const [mediaFormat, setMediaFormat] = useState('.wav')\r\n  const [showApiModal, setShowApiModal] = useState(false)\r\n  const [data, setData] = useState({})\r\n  const [transcribing, setTranscribing] = useState(false)\r\n  const [transcriptionFinished, setTranscriptionFinished] = useState(false)\r\n  const [serviceRegion, setServiceRegion] = useState(getRegion())\r\n  const [outputFormat, setOutputFormat] = useState(getOutputFormat())\r\n  const [languageOptions, setLanguageOptions] = useState('en-US')\r\n  const [file, setFile] = useState<File>()\r\n  const [time, setTime] = useState(0)\r\n\r\n  const apiModalRef = useRef<HTMLDivElement>(null)\r\n  const [recos, setRecos] = useState<FileWithReco[]>()\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('subscriptionKey', subscriptionKeyValue ? subscriptionKeyValue : '');\r\n    localStorage.setItem('region', serviceRegion ? serviceRegion : '');\r\n    localStorage.setItem('outputFormat', outputFormat ? outputFormat : '');\r\n  }, [subscriptionKeyValue, serviceRegion, outputFormat])\r\n\r\n  const resetTranscription = () => {\r\n    if (transcriptionFinished && !transcribing) {\r\n      setTranscriptionFinished(false);\r\n      var button = document.getElementById(\"transcriptionButton\");\r\n      var finished = document.getElementById('finishedTranscriptionText');\r\n      if (button !== null && finished !== null) {\r\n        button.innerText = \"Begin Transcribing!\";\r\n        finished.style.visibility = \"hidden\";\r\n      }\r\n    }\r\n  }\r\n\r\n  const startTranscription = async () => {\r\n    if (!transcriptionFinished) {\r\n      if (file === null || file === undefined) {\r\n        return;\r\n      }\r\n      \r\n      var button = document.getElementById('transcriptionButton');\r\n      var select = document.getElementById('filePicker');\r\n      if (button !== null && select !== null) {\r\n        button.innerText = \"Starting transcription...\";\r\n        select.setAttribute('disabled', '');\r\n      }\r\n      var [files, audio_time] = await splitAudio(file);\r\n      files = files as File[];\r\n      audio_time = audio_time as number;\r\n      setTime(audio_time);\r\n      const recosLocal = filePickerChange(files, setTranscribing, subscriptionKeyValue,\r\n        serviceRegion, languageOptions)\r\n      recognize(recosLocal, outputFileName, mediaFormat, setTranscribing,\r\n        setTranscriptionFinished, setData, audio_time);\r\n      setRecos(recosLocal)\r\n    } else {\r\n      console.log(time);\r\n      output(data as string[], outputFileName, mediaFormat, outputFormat, time);\r\n    }\r\n  }\r\n\r\n  const subscriptionKeyFocus = () => {\r\n    if (subscriptionKeyValue === 'Your Microsoft Speech API Key') {\r\n      setSubscriptionKeyValue('');\r\n    }\r\n  }\r\n\r\n  const handleClickOutside = (event: any) => {\r\n\r\n    if (apiModalRef.current && apiModalRef?.current !== event.target && !apiModalRef?.current.contains(event.target)) {\r\n      setShowApiModal(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClickOutside, true);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside, true);\r\n    };\r\n  }, [apiModalRef]);\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <div className=\"form\">\r\n        <div className=\"form_element\">\r\n          <div>\r\n            <label> API KEY</label> <br />\r\n            <input id=\"subscriptionKey\" type=\"text\" size={40} value={subscriptionKeyValue} onChange={(event) => setSubscriptionKeyValue(event.target.value)}\r\n              onFocus={subscriptionKeyFocus} onBlur={() => setSubscriptionKeyValue(getSubsriptionKey())} />\r\n          </div>\r\n        </div>\r\n        <div className=\"form_element\">\r\n          <div>\r\n            <label> REGION</label> <br />\r\n            <ServiceRegions setServiceRegion={setServiceRegion} />\r\n          </div>\r\n        </div>\r\n        <div className=\"form_element\">\r\n          <div>\r\n            <label> LANGUAGE</label> <br />\r\n            <LanguageOptions setLanguageOptions={setLanguageOptions} />\r\n          </div>\r\n        </div>\r\n        <div className=\"form_element\">\r\n          <div>\r\n            <label> OUTPUT FORMAT</label> <br />\r\n            <OutputOptions setOutputFormat={setOutputFormat} />\r\n          </div>\r\n        </div>\r\n        <div className=\"form_element\">\r\n          <div>\r\n            <label> SELECT FILE</label> <br />\r\n            <input type=\"file\" id=\"filePicker\" accept=\"audio/*\" onClick={() => resetTranscription()}\r\n              onChange={(event) => {\r\n                if (event.target.files !== null) {\r\n                  var file = (event.target.files[0] !== null && event.target.files[0] !== undefined) ? event.target.files[0] : null;\r\n                  if (file !== null) {\r\n                    var name = file.name;\r\n                    setOutputFileName(name.substring(0, name.lastIndexOf('.')));\r\n                    setMediaFormat(name.substring(name.lastIndexOf('.'), name.length));\r\n                    setFile(file);\r\n                  }\r\n                }\r\n              }}></input>\r\n          </div>\r\n        </div>\r\n        <div className=\"form_element\">\r\n          <div>\r\n            <button id=\"transcriptionButton\" onClick={() => startTranscription()}\r\n              disabled={transcribing}>Begin transcribing!</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"form_element\" id=\"finishedTranscriptionText\">\r\n          <p>The transcription has automatically been downloaded to your machine. <br />\r\n            If you want a different output format, change it accordingly and press \"Download again\".<br />\r\n            If you want to start a new transcription, simply choose another file.</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Home;","export default __webpack_public_path__ + \"static/media/icon.51628696.svg\";","import logo from '../images/icon.svg';\r\nexport const Header = () => {\r\n  return (\r\n    <div id=\"header\">\r\n      <img id=\"logo\" src={logo} alt=\"logo\"/> \r\n      <p>Bed Word</p>\r\n    </div>\r\n  )\r\n}\r\n","export const Footer = () => {\r\n  return (\r\n    <div id=\"footer\">\r\n      <p>\r\n      <br />Developed by Marcus Ma in association with Georgia Tech.\r\n      \r\n      <br /> Based on the amazing tool, <a target=\"_blank\" rel='noreferrer' href=\"https://clox.ling.washington.edu/\"> CLOx, </a>\r\n      developed at the<br/> University of Washington Sociolinguistics Laboratory.\r\n      <br />Powered by Microsoft Azure Cognitive Services.\r\n    <br /> Logo designed by Andy Zheng.\r\n      \r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Home from './pages/Home'\r\nimport { Header } from './components/Header';\r\nimport { Footer } from './components/Footer';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Header />\r\n      <Switch>\r\n        <Route path={`/`} exact component={() => <Home />} />\r\n      </Switch>\r\n      <Footer />\r\n    </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('index')\r\n);\r\n"],"sourceRoot":""}